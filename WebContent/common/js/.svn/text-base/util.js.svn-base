	/**
	 * @author nox &lt;nox@lexken.co.kr&gt;, &lt;noxajax@gmail.com&gt;
     * @version 0.5, 2007/10/14, initial revision
     * @fileOverview
     *
	 * <p>Copyright (C) 2007 Lexken Corporation. All rights reserved.</p>
     *
     * 이 파일에는 Static Object인 CommonUtil, Notaion, UTF8등이 있습니다.<br />
	 * 이 객체들을 사용하기 위해선 반드시 string.js, prototype.js(Ver.1.5.x 이상)을 포함해야 한다.
	 */

	/**
	 * CommonUtil 객체는 공통으로 사용하는 기본적인 method들을 포함합니다. (IP, 숫자, 한글등 검사)
	 * @static
	 */
   	var CommonUtil = {
   	    /**
   	     * @param {object} regex RegExp(정규변환 객체) 또는 정규식 문자
   	     * @param {string} search 정규식 검색 범위 i,m,g 없으면 global search
   	     * @return {RegExp} 정규변환 객체 반환, regex가 null이면 빈 정규변환 객체 반환
   	     */
   	    getRegExp: function (regex, search) {
   	        if (!regex) return //;
   	        return (typeof regex == 'string') ? new RegExp(regex, (search || 'g')) : regex;
   	    },

   	    /**
   	     * 문자를 정규식에 맞게 변환해서 반환, 내부적으로 string의 replace 사용
   	     *
   	     * @example
   	     * CommonUtil.replace('1가나다', /[0-9]/g);
   	     * CommonUtil.replace('1가나다', /[0-9]/g, '');
   	     *
   	     * @param {string} value 치환할 문자
   	     * @param {object} regex RegExp 또는 정규식 문자
   	     * @param {string} replacement 치환 문자
   	     * @return {string} 정규식으로 replacement로 치환한 문자
   	     */
   	    replace: function (value, regex, replacement) {
   	        var regex = this.getRegExp(regex);
   	        return !regex ? value : String(value).replace (regex, (replacement || ''));
   	    },

   	    /**
   	     * 유효한 숫자인지 검사
   	     *
   	     * @example
   	     * var value = 1234;
   	     * CommonUtil.isNumber(value);
   	     *
   	     * value = '12 34';
   	     * CommonUtil.isNumber(value);
   	     * CommonUtil.isNumber(value, /^\s+/, '');
   	     *
   	     * @param {string} value 검사할 문자 또는 숫자
   	     * @param {object} regex RegExp(정규변환 객체) 또는 정규식 문자
   	     * @param {string} replacement value를 치환할 문자
   	     * @return {boolean} 숫자이면 true 나머진 false
   	     */
   	    isNumber: function (value, regex, replacement) {
   	        return !/[^0-9]/.test(this.replace (value, regex, replacement));
   	    },

   	    /**
   	     * 유효한 IP (Internet Protocol Address)인지 검사
   	     *
   	     * @example
   	     * var value = '1.1.1.1';
   	     * CommonUtil.isIP(value);
   	     *
   	     * value = '10.68.33.300';
   	     * CommonUtil.isIP(value);
   	     *
   	     * value = '1.1.1';
   	     * CommonUtil.isIP(value);
   	     *
   	     * @param {string} address Internet Protocol Address(IP)
   	     * @return {boolean} 유효한 IP면 true
   	     */
   	    isIP: function (address) {
   	        var expIP = '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}'
   	                    + '([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$';
   	        return new RegExp(expIP, 'g').test(String(address));
   	    },

   	    /**
   	     * 유효한 영문자인지 검사하여 true, false 반환
   	     *
   	     * @example
   	     * var value = 'nox! ^^';
   	     * CommonUtil.isEnglish(value);
   	     *
   	     * value = 'abc';
   	     * CommonUtil.isEnglish(value);
   	     *
   	     * @param {string} english 영문자
   	     * @param {object} regex RegExp(정규변환 객체) 또는 정규식 문자
   	     * @param {string} replacement english를 치환할 문자
   	     * @return {boolean} 유효한 영문자이면 true
   	     */
   	    isEnglish: function (english, regex, replacement) {
   	        return !/[^a-zA-Z]/.test(this.replace (english, regex, replacement));
   	    },

   	    /**
   	     * 유효한 한글인지 검사하여 true, false 반환
   	     *
   	     * @example
   	     * var value = '가나';
   	     * CommonUtil.isKorean(value);
   	     *
   	     * value = '가1 나';
   	     * CommonUtil.isKorean(value, /[0-9]/g);
   	     * CommonUtil.isKorean(value, /[0-9|\s*]/g);
   	     *
   	     * @param {string} korean 한글을 검사할 값
   	     * @param {object} regex RegExp(정규변환 객체) 또는 정규식 문자
   	     * @param {string} replacement korean을 치환할 문자
   	     * @return {boolean} 유효한 한글이면 true
   	     */
   	    isKorean: function (korean, regex, replacement) {
   	        return !/[^\uac00-\ud79f]/.test(this.replace (korean, regex, replacement));
   	    },

   	    /**
   	     * 유효한 전자우편 주소인지 검사
   	     *
   	     * @example
   	     * var value = 'nox@lexken.co.kr';
   	     * CommonUtil.isEmail(value);
   	     *
   	     * value = 'noxajax@gmail';
   	     * CommonUtil.isEmail(value);
   	     *
   	     * @param {string} email
   	     * @return {boolean} 유효한 E-mail이면 true
   	     */
   	    isEmail: function (email) {
   	        var regex = /^[a-z0-9_\-]+(\.[_a-z0-9\-]+)*@([_a-z0-9\-]+\.)+([a-z]{2,6})$/;
   	        return regex.test(String(email));
   	    },

   	    isValidURL: function (url) {
   	        return true;
   	    },

   	    /**
   	     * 숫자/영문 혼합 검사, 숫자/영문 순서는 관계 없음.
   	     *
   	     * @example
   	     * var value = 'nox@lexken.co.kr';
   	     * CommonUtil.isNumAndAlpha(value);
   	     *
   	     * value = 'noxajax@gmail';
   	     * CommonUtil.isEmail(value);
   	     *
   	     * @param {string} str 숫자/영문 혼합을 검사할 문자
   	     * @return {boolean} 숫자/영문 혼합 문자이면 true 리턴
   	     */
   	    isNumAndAlpha: function (str) {
   	    	var regex = /[\d]+[A-Za-z]|[A-Za-z]+[\d]/;
   	        return regex.test(String(str));
   		},

   	    /**
   	     * input tag의 type이 checkbox의 array를 가지고 checked된 object 있는지 유무 검사 
   	     *
   	     * @param {array} checkBoxs input tag의 type이 checkbox인 object array
   	     * @return {boolean} checked된 object가 1개 이상이면 true 리턴
   	     */
   	    isCheckedBox: function (checkBoxs) {
   	    	if (typeof checkBoxs == "undefined" || typeof checkBoxs.constructor !== Array 
   	    		|| 0 >= checkBoxs.length) {
   	    		return false;
   	    	}	
   	    
	 		for (var i = 0; i < checkBoxs.length; i++) {
				if (!!checkBoxs[i].checked) return true;
			}
			
			return false;
   	    },

   	    /**
   	     * length 보다 value가 작으면 앞에 0을 붙여서 반환
   	     *
   	     * @example
   	     * var value = 2;
   	     * CommonUtil.toZeroPadded(value, 2);
   	     *
   	     * @param {object} value string, number etc
   	     * @param {integer} length length 반화할 전체 문자 길이
   	     * @return {string}
   	     */
   	    toZeroPadded: function (value, length) {
   	        if (!value )return value;
   	        for (var i = 0, zero = ''; i < length; i++) zero += '0';
   	        return (zero + String(value)).right(length);
   	    },

	    /**
	     * DOM id에 mouse event를 발생 시킨다.
	     * 
   	     * @example	     
   	     * CommonUtil.fireMouseEvent('lexken', 'click');
	     *
   	     * @param {string} element DOM id
   	     * @param {string} eventType mouse event types 
   	     *					- click, dbclick, mousedown, mouseup, mouseover, mousemove, mouseout
	     */
   	    fireMouseEvent: function (element, eventType) {
    		var elem = $(element);
    		if (!elem) return;
    		if (!!document.createEvent) { // non IE
    			var evt = document.createEvent ('MouseEvents');
    			evt.initMouseEvent (eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    			elem.dispatchEvent (evt);
    		} else { // for IE
    			var event = document.createEventObject();
    			event.eventType = 'on' + eventType;
    			elem.fireEvent (event.eventType, event);
    		}
    	},

        serialize: function(form, options) {
            return CommonUtil.serializeElements(Form.getElements(form), options);
        },

        serializeElements: function(elements, options) {
            if (typeof options != 'object') options = { hash: !!options };
            else if (options.hash === undefined) options.hash = true;
            var key, value, submitted = false, submit = options.submit;

            var data = elements.inject({ }, function(result, element) {
                if (element.name) {
                    key = element.name; value = $(element).getValue();
                    if (value != null && (element.type != 'submit' || (!submitted &&
                        submit !== false && (!submit || key == submit) && (submitted = true)))) {
                        if (key in result) {
                            // a key is already present; construct an array of values
                            if (!Object.isArray(result[key])) result[key] = [result[key]];
                            result[key].push(value);
                        }
                        else result[key] = value;
                    }
                }
                return result;
            });

            return options.hash ? data : Object.toQueryString(data);
        }
    };

	/**
	 * Notation는 가격처럼 문자열에 특정 문자를 집어 넣을때 사용
	 * @static
	 */
	var Notation = {
	    DEF_OFFSET: 3,
	    DEF_NOTATION: ',',

	    /**
	     * arg0(처리할 값), arg1(Notaion 문자), asrg2(Notaion 문자를 몇 글자마다 추가할지 offset)
	     *
	     * @example
	     * Notation.getValue('500000');
	     * Notation.getValue('test', '\\', 2);
	     * Notation.getValue('Lexken', ' *** ', 1);
	     *
	     * @return {string}
	     */
	    getValue: function () {
	        var args = $A(arguments);
	        if (!args.first()) return args.first();

	        var value = String(args.first());
	        var notation = (args[1] || this.DEF_NOTATION);
	        var offset = (args[2] || this.DEF_OFFSET);
	        for (var i = 1, j = 0, length = value.length/offset; i <= length; i++, j++) {
	            var space = value.length - (i * offset + (j * notation.length));
			    if (0 < space) value = value.insert(space, notation);
            }
            return value;
        }
	};

	/**
	 * 문자를 UTF8로 decode, encode 하며 string의 encodeUTF8, decodeUTF8 사용<br />
	 * @static
	 */
	var UTF8 = {
	    /**
	     * 문자를 UTF-8로 encode
	     *
	     * @example
	     * value = 'UTF-8로 만들기';
	     * UTF8.encode(value);
	     *
	     * @param {string} string UTF8 encode하고자 하는 값
	     * @return {string}
	     */
	    encode: function (string) {
	        return String(string).encodeUTF8();
        },

        /**
         * UTF-8로 encode된 문자를 decode
         *
         * @example
         * value = 'UTF-8로 만들기';
         * UTF8.decode(UTF8.encode(value));
         *
         * @param {string} utftext UTF8로 encode된 문자열
         * @return {string}
         */
        decode: function (utftext) {
            return String(utftext).decodeUTF8();
        }
    };
    
    
    
    function SetPriceInput(str){
	str=str.replace(/,/g,'');
	var retValue = "";
	
	if(str.length>1){
		if(str.charAt(0)==0){
			str = str.substring(1,str.length);
		}
	}	
	
	for(i=1; i<=str.length; i++){
		if(i > 1 && (i%3)==1){ 
	       retValue = str.charAt(str.length - i) + "," + retValue;
		}else{ 
	       retValue = str.charAt(str.length - i) + retValue;    
		}
	}		
		
	return retValue;
}



	function timeFileName(){
		var now = new Date();
	    var year= now.getFullYear();
	    var mon = (now.getMonth()+1)>9 ? ''+(now.getMonth()+1) : '0'+(now.getMonth()+1);
	    var day = now.getDate()>9 ? ''+now.getDate() : '0'+now.getDate();
	              
	    var chan_val = year + '-' + mon + '-' + day;
	    
		return chan_val;
	}









