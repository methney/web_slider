    /*
      (c) 2008 <nox@lexken.co.kr>, <noxajax@gmail.com> Lexken Inc.
      # Notice - required prototype.js
    */
    var LexkenTip = Class.create();
    LexkenTip.prototype = {
    	options: {
    		onShow: function(tip) { this.showTip(tip) },
    		onHide: function(tip) { this.hideTip(tip) },
    		showDelay: 100,
    		hideDelay: 100,
    		className: 'tool',
    		title: 'tip'
    	},
    
        initialize: function(elements, options) {
    	   if(!!Object.isUndefined(elements) || !Object.isArray(elements)) return;
    	   Object.extend(this.options, options || { });
    	   
    	   this.toolTip = document.createElement('div');
    	   this.toolTip.className = this.options.className + '-tip';
    	   Element.Methods.setStyle(this.toolTip, 'position: absolute; top: 0, left: 0; display: hidden');
    	   
    	   this.createTipArea();
    	   document.body.appendChild(this.toolTip);
    	   Element.Methods.hide(this.toolTip);
    	   this.attachTipElements(elements);
    	},
    
    	createTipArea: function () {
    		var text = document.createElement('div');
    	   	text.className = this.options.className + '-text';
    	   	this.toolTip.appendChild(text);
    	}, 
    	
    	attachTipElements: function (elements) {
    		var showListener = this.showTip.bindAsEventListener(this);
    		var hideListener = this.hideTip.bindAsEventListener(this);
    		for (var i = 0; i < elements.length; i++) {
    		     Event.observe (elements[i], 'mouseout', hideListener);
    		     Event.observe (elements[i], 'mousemove', showListener);
    		}
    	},
    	
    	showTip: function (event) {
    		var elem = Event.element(event);
    		if(!!Object.isUndefined(this.toolTip) || !!Object.isUndefined(this.toolTip.firstChild)) return;
    	    if(!elem || !elem.getAttribute(this.options.title)) return;
    	    
    	    var textNode = null;        	    
    	    if (0 >= this.toolTip.firstChild.childNodes.length) {
    	    	var tip = elem.getAttribute(this.options.title); 
            	tip = tip.replace('\r', '<br />'); 
            	Insertion.Bottom(this.toolTip.firstChild, tip);
                // textNode = document.createTextNode (tip);
                // tipText.appendChild(textNode);               
            }
            
            var x = event.clientX, y = event.clientY;
    	    this.toolTip.style.left = x + 'px';
			this.toolTip.style.top = y + 'px';
    	    Element.Methods.show(this.toolTip); 
    	},
    	
    	hideTip: function(event) {
    	    if(!!Object.isUndefined(this.toolTip) || !!Object.isUndefined(this.toolTip.firstChild)) return;
    	    if(!!this.toolTip.firstChild) this.toolTip.removeChild (this.toolTip.firstChild);
    	    this.createTipArea();
    	    
    	    /*
    	    var tipText = this.toolTip.firstChild
    	    if (!!tipText && !!tipText.firstChild) {
    	    	childNodes
    	    }
    	    */ 	
    	    Element.Methods.hide(this.toolTip);
    	}
    };